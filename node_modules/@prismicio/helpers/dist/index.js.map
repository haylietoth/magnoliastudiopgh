{"version":3,"file":"index.js","sources":["../src/asDate.ts","../src/documentToLinkField.ts","../src/asLink.ts","../src/asText.ts","../src/lib/serializerHelpers.ts","../src/asHTML.ts","../src/isFilled.ts","../src/asImageSrc.ts","../src/asImageWidthSrcSet.ts","../src/asImagePixelDensitySrcSet.ts","../src/index.ts"],"sourcesContent":["import type { DateField, TimestampField } from \"@prismicio/types\";\n\n/**\n * The return type of `asDate()`.\n */\ntype AsDateReturnType<\n\tField extends DateField | TimestampField | null | undefined,\n> = Field extends DateField<\"filled\"> | TimestampField<\"filled\"> ? Date : null;\n\n/**\n * Transforms a date or timestamp field into a JavaScript Date object\n *\n * @param dateOrTimestampField - A date or timestamp field from Prismic\n *\n * @returns A Date object, null if provided date is falsy\n * @see Templating date field from Prismic {@link https://prismic.io/docs/technologies/templating-date-field-javascript}\n */\nexport const asDate = <\n\tField extends DateField | TimestampField | null | undefined,\n>(\n\tdateOrTimestampField: Field,\n): AsDateReturnType<Field> => {\n\tif (!dateOrTimestampField) {\n\t\treturn null as AsDateReturnType<Field>;\n\t}\n\n\t// If field is a timestamp field...\n\tif (dateOrTimestampField.length === 24) {\n\t\t/**\n\t\t * Converts basic ISO 8601 to ECMAScript simplified ISO 8601 format for\n\t\t * browser compatibility issues\n\t\t *\n\t\t * From: YYYY-MM-DDTHH:mm:ssZ To: YYYY-MM-DDTHH:mm:ss.sssZ\n\t\t *\n\t\t * @see MDN documentation: {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date#timestamp_string}\n\t\t * @see ECMAScript 2020 language specification: {@link https://262.ecma-international.org/11.0/#sec-date-time-string-format}\n\t\t * @see Related forum issue: {@link https://community.prismic.io/t/prismics-date-api/2520}\n\t\t * @see Regex101 expression: {@link https://regex101.com/r/jxyETT/1}\n\t\t */\n\t\treturn new Date(\n\t\t\tdateOrTimestampField.replace(/(\\+|-)(\\d{2})(\\d{2})$/, \".000$1$2:$3\"),\n\t\t) as AsDateReturnType<Field>;\n\t} else {\n\t\t// ...else field is a date field\n\t\treturn new Date(dateOrTimestampField) as AsDateReturnType<Field>;\n\t}\n};\n","import {\n\tFilledLinkToDocumentField,\n\tLinkType,\n\tPrismicDocument,\n} from \"@prismicio/types\";\n\ntype SetOptional<T, Keys extends keyof T> = Omit<T, Keys> &\n\tPartial<Pick<T, Keys>>;\n\n/**\n * Converts a document into a link field, this is useful when crawling the API\n * for document links\n *\n * @typeParam TDocument - Specific interface of the provided document\n * @param prismicDocument - A document coming from Prismic\n *\n * @returns The equivalent link field to use with `asLink()`\n * @internal\n */\nexport const documentToLinkField = <\n\tTDocument extends SetOptional<PrismicDocument, \"slugs\">,\n>(\n\tprismicDocument: TDocument,\n): FilledLinkToDocumentField<\n\tTDocument[\"type\"],\n\tTDocument[\"lang\"],\n\tTDocument[\"data\"]\n> => {\n\treturn {\n\t\tlink_type: LinkType.Document,\n\t\tid: prismicDocument.id,\n\t\tuid: prismicDocument.uid ?? undefined,\n\t\ttype: prismicDocument.type,\n\t\ttags: prismicDocument.tags,\n\t\tlang: prismicDocument.lang,\n\t\turl: prismicDocument.url ?? undefined,\n\t\tslug: prismicDocument.slugs?.[0], // Slug field is not available with GraphQl\n\t\t// The REST API does not include a `data` property if the data object is empty.\n\t\t...(Object.keys(prismicDocument.data).length > 0\n\t\t\t? { data: prismicDocument.data }\n\t\t\t: {}),\n\t};\n};\n","import {\n\tFilledLinkToDocumentField,\n\tFilledLinkToMediaField,\n\tFilledLinkToWebField,\n\tLinkField,\n\tLinkType,\n\tPrismicDocument,\n} from \"@prismicio/types\";\n\nimport { documentToLinkField } from \"./documentToLinkField\";\nimport { LinkResolverFunction } from \"./types\";\n\n/**\n * The return type of `asLink()`.\n */\ntype AsLinkReturnType<\n\tLinkResolverFunctionReturnType = string,\n\tField extends LinkField | PrismicDocument | null | undefined =\n\t\t| LinkField\n\t\t| PrismicDocument\n\t\t| null\n\t\t| undefined,\n> = Field extends\n\t| FilledLinkToWebField\n\t| FilledLinkToMediaField\n\t| FilledLinkToDocumentField\n\t| PrismicDocument\n\t? LinkResolverFunctionReturnType | string | null\n\t: null;\n\n/**\n * Resolves any type of link field or document to a URL\n *\n * @typeParam LinkResolverFunctionReturnType - Link resolver function return type\n * @param linkFieldOrDocument - Any kind of link field or a document to resolve\n * @param linkResolver - An optional link resolver function, without it you're\n *   expected to use the `routes` options from the API\n *\n * @returns Resolved URL, null if provided link is empty\n * @see Prismic link resolver documentation: {@link https://prismic.io/docs/technologies/link-resolver-javascript}\n * @see Prismic API `routes` options documentation: {@link https://prismic.io/docs/technologies/route-resolver-nuxtjs}\n */\nexport const asLink = <\n\tLinkResolverFunctionReturnType = string,\n\tField extends LinkField | PrismicDocument | null | undefined =\n\t\t| LinkField\n\t\t| PrismicDocument\n\t\t| null\n\t\t| undefined,\n>(\n\tlinkFieldOrDocument: Field,\n\tlinkResolver?: LinkResolverFunction<LinkResolverFunctionReturnType> | null,\n): AsLinkReturnType<LinkResolverFunctionReturnType, Field> => {\n\tif (!linkFieldOrDocument) {\n\t\treturn null as AsLinkReturnType<LinkResolverFunctionReturnType, Field>;\n\t}\n\n\t// Converts document to link field if needed\n\tconst linkField = (\n\t\t\"link_type\" in linkFieldOrDocument\n\t\t\t? linkFieldOrDocument\n\t\t\t: documentToLinkField(linkFieldOrDocument)\n\t) as LinkField;\n\n\tswitch (linkField.link_type) {\n\t\tcase LinkType.Media:\n\t\tcase LinkType.Web:\n\t\t\treturn (\"url\" in linkField ? linkField.url : null) as AsLinkReturnType<\n\t\t\t\tLinkResolverFunctionReturnType,\n\t\t\t\tField\n\t\t\t>;\n\n\t\tcase LinkType.Document: {\n\t\t\tif (\"id\" in linkField && linkResolver) {\n\t\t\t\t// When using Link Resolver...\n\t\t\t\tconst resolvedURL = linkResolver(linkField);\n\n\t\t\t\tif (resolvedURL != null) {\n\t\t\t\t\treturn resolvedURL as AsLinkReturnType<\n\t\t\t\t\t\tLinkResolverFunctionReturnType,\n\t\t\t\t\t\tField\n\t\t\t\t\t>;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (\"url\" in linkField && linkField.url) {\n\t\t\t\t// When using Route Resolver...\n\t\t\t\treturn linkField.url as AsLinkReturnType<\n\t\t\t\t\tLinkResolverFunctionReturnType,\n\t\t\t\t\tField\n\t\t\t\t>;\n\t\t\t}\n\n\t\t\t// When empty or Link Resolver and Route Resolver are not used...\n\t\t\treturn null as AsLinkReturnType<LinkResolverFunctionReturnType, Field>;\n\t\t}\n\n\t\tcase LinkType.Any:\n\t\tdefault:\n\t\t\treturn null as AsLinkReturnType<LinkResolverFunctionReturnType, Field>;\n\t}\n};\n","import { asText as baseAsText } from \"@prismicio/richtext\";\nimport { RichTextField } from \"@prismicio/types\";\n\n/**\n * The return type of `asText()`.\n */\ntype AsTextReturnType<Field extends RichTextField | null | undefined> =\n\tField extends RichTextField ? string : null;\n\n/**\n * Serializes a rich text or title field to a plain text string\n *\n * @param richTextField - A rich text or title field from Prismic\n * @param separator - Separator used to join each element, defaults to a space\n *\n * @returns Plain text equivalent of the provided rich text or title field\n * @see Templating rich text and title fields from Prismic {@link https://prismic.io/docs/technologies/templating-rich-text-and-title-fields-javascript}\n */\nexport const asText = <Field extends RichTextField | null | undefined>(\n\trichTextField: Field,\n\tseparator?: string,\n): AsTextReturnType<Field> => {\n\tif (richTextField) {\n\t\treturn baseAsText(richTextField, separator) as AsTextReturnType<Field>;\n\t} else {\n\t\treturn null as AsTextReturnType<Field>;\n\t}\n};\n","import escapeHtml from \"escape-html\";\nimport {\n\tRTBlockNode,\n\tRTInlineNode,\n\tRTPreformattedNode,\n\tRTImageNode,\n\tRTEmbedNode,\n\tRTLinkNode,\n\tLinkType,\n\tRichTextNodeType,\n} from \"@prismicio/types\";\n\nimport { asLink } from \"../asLink\";\nimport { LinkResolverFunction } from \"../types\";\n\nexport const getLabel = (node: RTBlockNode | RTInlineNode): string => {\n\treturn \"data\" in node && \"label\" in node.data\n\t\t? ` class=\"${node.data.label}\"`\n\t\t: \"\";\n};\n\nexport const serializeStandardTag = (\n\ttag: string,\n\tnode: RTBlockNode | RTInlineNode,\n\tchildren: string[],\n): string => {\n\treturn `<${tag}${getLabel(node)}>${children.join(\"\")}</${tag}>`;\n};\n\nexport const serializePreFormatted = (node: RTPreformattedNode): string => {\n\treturn `<pre${getLabel(node)}>${escapeHtml(node.text)}</pre>`;\n};\n\nexport const serializeImage = (\n\tlinkResolver: LinkResolverFunction<string> | undefined | null,\n\tnode: RTImageNode,\n): string => {\n\tlet imageTag = `<img src=\"${node.url}\" alt=\"${escapeHtml(node.alt)}\"${\n\t\tnode.copyright ? ` copyright=\"${escapeHtml(node.copyright)}\"` : \"\"\n\t} />`;\n\n\t// If the image has a link, we wrap it with an anchor tag\n\tif (node.linkTo) {\n\t\timageTag = serializeHyperlink(\n\t\t\tlinkResolver,\n\t\t\t{\n\t\t\t\ttype: RichTextNodeType.hyperlink,\n\t\t\t\tdata: node.linkTo,\n\t\t\t\tstart: 0,\n\t\t\t\tend: 0,\n\t\t\t},\n\t\t\t[imageTag],\n\t\t);\n\t}\n\n\treturn `<p class=\"block-img\">${imageTag}</p>`;\n};\n\nexport const serializeEmbed = (node: RTEmbedNode): string => {\n\treturn `<div data-oembed=\"${node.oembed.embed_url}\" data-oembed-type=\"${\n\t\tnode.oembed.type\n\t}\" data-oembed-provider=\"${node.oembed.provider_name}\"${getLabel(node)}>${\n\t\tnode.oembed.html\n\t}</div>`;\n};\n\nexport const serializeHyperlink = (\n\tlinkResolver: LinkResolverFunction | undefined | null,\n\tnode: RTLinkNode,\n\tchildren: string[],\n): string => {\n\tswitch (node.data.link_type) {\n\t\tcase LinkType.Web: {\n\t\t\treturn `<a href=\"${escapeHtml(node.data.url)}\" target=\"${\n\t\t\t\tnode.data.target\n\t\t\t}\" rel=\"noopener noreferrer\"${getLabel(node)}>${children.join(\"\")}</a>`;\n\t\t}\n\n\t\tcase LinkType.Document: {\n\t\t\treturn `<a href=\"${asLink(node.data, linkResolver)}\"${getLabel(\n\t\t\t\tnode,\n\t\t\t)}>${children.join(\"\")}</a>`;\n\t\t}\n\n\t\tcase LinkType.Media: {\n\t\t\treturn `<a href=\"${node.data.url}\"${getLabel(node)}>${children.join(\n\t\t\t\t\"\",\n\t\t\t)}</a>`;\n\t\t}\n\t}\n};\n\nexport const serializeSpan = (content?: string): string => {\n\treturn content ? escapeHtml(content).replace(/\\n/g, \"<br />\") : \"\";\n};\n","import {\n\tserialize,\n\tElement,\n\tcomposeSerializers,\n\tRichTextFunctionSerializer,\n\tRichTextMapSerializer,\n\twrapMapSerializer,\n} from \"@prismicio/richtext\";\nimport { RichTextField } from \"@prismicio/types\";\n\nimport {\n\tserializeStandardTag,\n\tserializePreFormatted,\n\tserializeImage,\n\tserializeEmbed,\n\tserializeHyperlink,\n\tserializeSpan,\n} from \"./lib/serializerHelpers\";\nimport {\n\tHTMLFunctionSerializer,\n\tHTMLMapSerializer,\n\tLinkResolverFunction,\n} from \"./types\";\n\n/**\n * Creates a default HTML serializer with a given Link Resolver providing\n * sensible and safe defaults for every node type\n *\n * @internal\n */\nconst createDefaultHTMLSerializer = (\n\tlinkResolver: LinkResolverFunction<string> | undefined | null,\n): RichTextFunctionSerializer<string> => {\n\treturn (_type, node, text, children, _key) => {\n\t\tswitch (node.type) {\n\t\t\tcase Element.heading1:\n\t\t\t\treturn serializeStandardTag(\"h1\", node, children);\n\t\t\tcase Element.heading2:\n\t\t\t\treturn serializeStandardTag(\"h2\", node, children);\n\t\t\tcase Element.heading3:\n\t\t\t\treturn serializeStandardTag(\"h3\", node, children);\n\t\t\tcase Element.heading4:\n\t\t\t\treturn serializeStandardTag(\"h4\", node, children);\n\t\t\tcase Element.heading5:\n\t\t\t\treturn serializeStandardTag(\"h5\", node, children);\n\t\t\tcase Element.heading6:\n\t\t\t\treturn serializeStandardTag(\"h6\", node, children);\n\t\t\tcase Element.paragraph:\n\t\t\t\treturn serializeStandardTag(\"p\", node, children);\n\t\t\tcase Element.preformatted:\n\t\t\t\treturn serializePreFormatted(node);\n\t\t\tcase Element.strong:\n\t\t\t\treturn serializeStandardTag(\"strong\", node, children);\n\t\t\tcase Element.em:\n\t\t\t\treturn serializeStandardTag(\"em\", node, children);\n\t\t\tcase Element.listItem:\n\t\t\t\treturn serializeStandardTag(\"li\", node, children);\n\t\t\tcase Element.oListItem:\n\t\t\t\treturn serializeStandardTag(\"li\", node, children);\n\t\t\tcase Element.list:\n\t\t\t\treturn serializeStandardTag(\"ul\", node, children);\n\t\t\tcase Element.oList:\n\t\t\t\treturn serializeStandardTag(\"ol\", node, children);\n\t\t\tcase Element.image:\n\t\t\t\treturn serializeImage(linkResolver, node);\n\t\t\tcase Element.embed:\n\t\t\t\treturn serializeEmbed(node);\n\t\t\tcase Element.hyperlink:\n\t\t\t\treturn serializeHyperlink(linkResolver, node, children);\n\t\t\tcase Element.label:\n\t\t\t\treturn serializeStandardTag(\"span\", node, children);\n\t\t\tcase Element.span:\n\t\t\tdefault:\n\t\t\t\treturn serializeSpan(text);\n\t\t}\n\t};\n};\n\n/**\n * Wraps a map serializer into a regular function serializer. The given map\n * serializer should accept children as a string, not as an array of strings\n * like `@prismicio/richtext`'s `wrapMapSerializer`.\n *\n * @param mapSerializer - Map serializer to wrap\n *\n * @returns A regular function serializer\n */\nconst wrapMapSerializerWithStringChildren = (\n\tmapSerializer: HTMLMapSerializer,\n): RichTextFunctionSerializer<string> => {\n\tconst modifiedMapSerializer = {} as RichTextMapSerializer<string>;\n\n\tfor (const tag in mapSerializer) {\n\t\tconst tagSerializer = mapSerializer[tag as keyof typeof mapSerializer];\n\n\t\tif (tagSerializer) {\n\t\t\tmodifiedMapSerializer[tag as keyof typeof mapSerializer] = (payload) => {\n\t\t\t\treturn tagSerializer({\n\t\t\t\t\t...payload,\n\t\t\t\t\t// @ts-expect-error - merging blockSerializer types causes TS to bail to a never type\n\t\t\t\t\tchildren: payload.children.join(\"\"),\n\t\t\t\t});\n\t\t\t};\n\t\t}\n\t}\n\n\treturn wrapMapSerializer(modifiedMapSerializer);\n};\n\n/**\n * The return type of `asHTML()`.\n */\ntype AsHTMLReturnType<Field extends RichTextField | null | undefined> =\n\tField extends RichTextField ? string : null;\n\n/**\n * Serializes a rich text or title field to an HTML string\n *\n * @param richTextField - A rich text or title field from Prismic\n * @param linkResolver - An optional link resolver function to resolve links,\n *   without it you're expected to use the `routes` options from the API\n * @param htmlSerializer - An optional serializer, unhandled cases will fallback\n *   to the default serializer\n *\n * @returns HTML equivalent of the provided rich text or title field\n * @see Templating rich text and title fields from Prismic {@link https://prismic.io/docs/technologies/templating-rich-text-and-title-fields-javascript}\n */\nexport const asHTML = <Field extends RichTextField | null | undefined>(\n\trichTextField: Field,\n\tlinkResolver?: LinkResolverFunction<string> | null,\n\thtmlSerializer?: HTMLFunctionSerializer | HTMLMapSerializer | null,\n): AsHTMLReturnType<Field> => {\n\tif (richTextField) {\n\t\tlet serializer: RichTextFunctionSerializer<string>;\n\t\tif (htmlSerializer) {\n\t\t\tserializer = composeSerializers(\n\t\t\t\ttypeof htmlSerializer === \"object\"\n\t\t\t\t\t? wrapMapSerializerWithStringChildren(htmlSerializer)\n\t\t\t\t\t: (type, node, text, children, key) =>\n\t\t\t\t\t\t\thtmlSerializer(type, node, text, children.join(\"\"), key),\n\t\t\t\tcreateDefaultHTMLSerializer(linkResolver),\n\t\t\t);\n\t\t} else {\n\t\t\tserializer = createDefaultHTMLSerializer(linkResolver);\n\t\t}\n\n\t\treturn serialize(richTextField, serializer).join(\n\t\t\t\"\",\n\t\t) as AsHTMLReturnType<Field>;\n\t} else {\n\t\treturn null as AsHTMLReturnType<Field>;\n\t}\n};\n","import type {\n\tAnyOEmbed,\n\tAnyRegularField,\n\tColorField,\n\tDateField,\n\tEmbedField,\n\tGeoPointField,\n\tGroupField,\n\tImageField,\n\tImageFieldImage,\n\tIntegrationFields,\n\tKeyTextField,\n\tLinkField,\n\tLinkToMediaField,\n\tNumberField,\n\tRelationField,\n\tRichTextField,\n\tSelectField,\n\tSharedSlice,\n\tSlice,\n\tSliceZone,\n\tTimestampField,\n\tTitleField,\n} from \"@prismicio/types\";\n\n/**\n * Determines if a value is not nullish (i.e. not `null` or `undefined`). This\n * is used to check if nullable field values are filled.\n *\n * @param input - The value to check.\n *\n * @returns `true` if `input` is not nullish, `false` otherwise.\n */\nconst isNonNullish = <T>(input: T): input is NonNullable<T> => {\n\treturn input != null;\n};\n\n/**\n * Determines if an array is not empty. This is used to check if array-based\n * fields are filled.\n *\n * @param input - The array to check.\n *\n * @returns `true` if `input` has at least one element, `false` otherwise.\n */\nconst isNonEmptyArray = <T>(input: T[]): input is [T, ...T[]] => {\n\treturn !!input.length;\n};\n\n/**\n * Determines if a Rich Text field is filled.\n *\n * @param field - Rich Text field to check.\n *\n * @returns `true` if `field` is filled, `false` otherwise.\n */\nexport const richText = (\n\tfield: RichTextField | null | undefined,\n): field is RichTextField<\"filled\"> => {\n\tif (!isNonNullish(field)) {\n\t\treturn false;\n\t} else if (field.length === 1 && \"text\" in field[0]) {\n\t\treturn !!field[0].text;\n\t} else {\n\t\treturn !!field.length;\n\t}\n};\n\n/**\n * Determines if a Title field is filled.\n *\n * @param field - Title field to check.\n *\n * @returns `true` if `field` is filled, `false` otherwise.\n */\nexport const title = richText as (\n\tfield: TitleField | null | undefined,\n) => field is TitleField<\"filled\">;\n\n/**\n * Determines if an Image thumbnail is filled.\n *\n * @param thumbnail - Image thumbnail to check.\n *\n * @returns `true` if `field` is filled, `false` otherwise.\n */\nexport const imageThumbnail = (\n\tthumbnail: ImageFieldImage | null | undefined,\n): thumbnail is ImageFieldImage<\"filled\"> => {\n\treturn isNonNullish(thumbnail) && !!thumbnail.url;\n};\n\n/**\n * Determines if an Image field is filled.\n *\n * @param field - Image field to check.\n *\n * @returns `true` if `field` is filled, `false` otherwise.\n */\nexport const image = imageThumbnail as <\n\tField extends ImageField,\n\tThumbnailNames extends Exclude<\n\t\tkeyof Field,\n\t\tkeyof ImageFieldImage | number | symbol\n\t>,\n>(\n\tfield: Field | ImageField<ThumbnailNames> | null | undefined,\n) => field is ImageField<ThumbnailNames, \"filled\">;\n\n/**\n * Determines if a Link field is filled.\n *\n * @param field - Link field to check.\n *\n * @returns `true` if `field` is filled, `false` otherwise.\n */\nexport const link = <\n\tTypeEnum = string,\n\tLangEnum = string,\n\tDataInterface extends Record<\n\t\tstring,\n\t\tAnyRegularField | GroupField | SliceZone\n\t> = never,\n>(\n\tfield: LinkField<TypeEnum, LangEnum, DataInterface> | null | undefined,\n): field is LinkField<TypeEnum, LangEnum, DataInterface, \"filled\"> => {\n\treturn isNonNullish(field) && (\"id\" in field || \"url\" in field);\n};\n\n/**\n * Determines if a Link to Media field is filled.\n *\n * @param field - Link to Media field to check.\n *\n * @returns `true` if `field` is filled, `false` otherwise.\n */\nexport const linkToMedia = link as (\n\tfield: LinkToMediaField | null | undefined,\n) => field is LinkToMediaField<\"filled\">;\n\n/**\n * Determines if a Content Relationship field is filled.\n *\n * @param field - Content Relationship field to check.\n *\n * @returns `true` if `field` is filled, `false` otherwise.\n */\nexport const contentRelationship = link as <\n\tTypeEnum = string,\n\tLangEnum = string,\n\tDataInterface extends Record<\n\t\tstring,\n\t\tAnyRegularField | GroupField | SliceZone\n\t> = never,\n>(\n\tfield: RelationField<TypeEnum, LangEnum, DataInterface> | null | undefined,\n) => field is RelationField<TypeEnum, LangEnum, DataInterface, \"filled\">;\n\n/**\n * Determines if a Date field is filled.\n *\n * @param field - Date field to check.\n *\n * @returns `true` if `field` is filled, `false` otherwise.\n */\nexport const date = isNonNullish as (\n\tfield: DateField | null | undefined,\n) => field is DateField<\"filled\">;\n\n/**\n * Determines if a Timestamp field is filled.\n *\n * @param field - Timestamp field to check.\n *\n * @returns `true` if `field` is filled, `false` otherwise.\n */\nexport const timestamp = isNonNullish as (\n\tfield: TimestampField | null | undefined,\n) => field is TimestampField<\"filled\">;\n\n/**\n * Determines if a Color field is filled.\n *\n * @param field - Color field to check.\n *\n * @returns `true` if `field` is filled, `false` otherwise.\n */\nexport const color = isNonNullish as (\n\tfield: ColorField | null | undefined,\n) => field is ColorField<\"filled\">;\n\n/**\n * Determines if a Number field is filled.\n *\n * @param field - Number field to check.\n *\n * @returns `true` if `field` is filled, `false` otherwise.\n */\nexport const number = isNonNullish as (\n\tfield: NumberField | null | undefined,\n) => field is NumberField<\"filled\">;\n\n/**\n * Determines if a Key Text field is filled.\n *\n * @param field - Key Text field to check.\n *\n * @returns `true` if `field` is filled, `false` otherwise.\n */\nexport const keyText = (\n\tfield: KeyTextField | null | undefined,\n): field is KeyTextField<\"filled\"> => {\n\treturn isNonNullish(keyText) && !!field;\n};\n\n/**\n * Determines if a Select field is filled.\n *\n * @param field - Select field to check.\n *\n * @returns `true` if `field` is filled, `false` otherwise.\n */\nexport const select = isNonNullish as <Enum extends string>(\n\tfield: SelectField<Enum> | null | undefined,\n) => field is SelectField<Enum, \"filled\">;\n\n/**\n * Determines if an Embed field is filled.\n *\n * @param field - Embed field to check.\n *\n * @returns `true` if `field` is filled, `false` otherwise.\n */\nexport const embed = <Field extends EmbedField<AnyOEmbed>>(\n\tfield:\n\t\t| (Field extends EmbedField<infer Data> ? EmbedField<Data> : never)\n\t\t| null\n\t\t| undefined,\n): field is Field extends EmbedField<infer Data>\n\t? EmbedField<Data, \"filled\">\n\t: never => {\n\treturn isNonNullish(field) && !!field.embed_url;\n};\n\n/**\n * Determines if a GeoPoint field is filled.\n *\n * @param field - GeoPoint field to check.\n *\n * @returns `true` if `field` is filled, `false` otherwise.\n */\nexport const geoPoint = (\n\tfield: GeoPointField | null | undefined,\n): field is GeoPointField<\"filled\"> => {\n\treturn isNonNullish(field) && \"longitude\" in field;\n};\n\n/**\n * Determines if an Integration Fields field is filled.\n *\n * @param field - Integration Fields field to check.\n *\n * @returns `true` if `field` is filled, `false` otherwise.\n */\nexport const integrationFields = isNonNullish as <Blob>(\n\tfield: IntegrationFields<Blob> | null | undefined,\n) => field is IntegrationFields<Blob, \"filled\">;\n\n/**\n * Determines if a Group has at least one item.\n *\n * @param group - Group to check.\n *\n * @returns `true` if `group` contains at least one item, `false` otherwise.\n */\nexport const group = <Fields extends Record<string, AnyRegularField>>(\n\tgroup: GroupField<Fields> | null | undefined,\n): group is GroupField<Fields, \"filled\"> => {\n\treturn isNonNullish(group) && isNonEmptyArray(group);\n};\n\n/**\n * Determines if a Slice Zone has at least one Slice.\n *\n * @param slices - Slice Zone to check.\n *\n * @returns `true` if `slices` contains at least one Slice, `false` otherwise.\n */\nexport const sliceZone = <Slices extends Slice | SharedSlice>(\n\tslices: SliceZone<Slices> | null | undefined,\n): slices is SliceZone<Slices, \"filled\"> => {\n\treturn isNonNullish(slices) && isNonEmptyArray(slices);\n};\n","import { ImageFieldImage } from \"@prismicio/types\";\nimport { buildURL, ImgixURLParams } from \"imgix-url-builder\";\n\nimport { imageThumbnail as isImageThumbnailFilled } from \"./isFilled\";\n\n/**\n * The return type of `asImageSrc()`.\n */\ntype AsImageSrcReturnType<Field extends ImageFieldImage | null | undefined> =\n\tField extends ImageFieldImage<\"filled\"> ? string : null;\n\n/**\n * Returns the URL of an Image field with optional image transformations (via\n * Imgix URL parameters).\n *\n * @example\n *\n * ```ts\n * const src = asImageSrc(document.data.imageField, { sat: -100 });\n * // => https://images.prismic.io/repo/image.png?sat=-100\n * ```\n *\n * @param field - Image field (or one of its responsive views) from which to get\n *   an image URL.\n * @param params - An object of Imgix URL API parameters to transform the image.\n *\n * @returns The Image field's image URL with transformations applied (if given).\n *   If the Image field is empty, `null` is returned.\n * @see Imgix URL parameters reference: https://docs.imgix.com/apis/rendering\n */\nexport const asImageSrc = <Field extends ImageFieldImage | null | undefined>(\n\tfield: Field,\n\tparams: ImgixURLParams = {},\n): AsImageSrcReturnType<Field> => {\n\tif (field && isImageThumbnailFilled(field)) {\n\t\treturn buildURL(field.url, params) as AsImageSrcReturnType<Field>;\n\t} else {\n\t\treturn null as AsImageSrcReturnType<Field>;\n\t}\n};\n","import { ImageFieldImage } from \"@prismicio/types\";\nimport {\n\tbuildURL,\n\tbuildWidthSrcSet,\n\tBuildWidthSrcSetParams,\n} from \"imgix-url-builder\";\n\nimport { imageThumbnail as isImageThumbnailFilled } from \"./isFilled\";\n\n/**\n * The return type of `asImageWidthSrcSet()`.\n */\ntype AsImageWidthSrcSetReturnType<\n\tField extends ImageFieldImage | null | undefined,\n> = Field extends ImageFieldImage<\"filled\">\n\t? {\n\t\t\t/**\n\t\t\t * The Image field's image URL with Imgix URL parameters (if given).\n\t\t\t */\n\t\t\tsrc: string;\n\n\t\t\t/**\n\t\t\t * A width-based `srcset` attribute value for the Image field's image with\n\t\t\t * Imgix URL parameters (if given).\n\t\t\t */\n\t\t\tsrcset: string;\n\t  }\n\t: null;\n\n/**\n * Creates a width-based `srcset` from an Image field with optional image\n * transformations (via Imgix URL parameters).\n *\n * If the Image field contains responsive views, each responsive view is used as\n * a width in the resulting `srcset`.\n *\n * If a `widths` parameter is not given, the following widths will be used by\n * default: 640, 750, 828, 1080, 1200, 1920, 2048, 3840.\n *\n * @example\n *\n * ```ts\n * const srcset = asImageWidthSrcSet(document.data.imageField, {\n * \twidths: [400, 800, 1600],\n * \tsat: -100,\n * });\n * // => {\n * //   src:    'https://images.prismic.io/repo/image.png?sat=-100',\n * //   srcset: 'https://images.prismic.io/repo/image.png?sat=-100&width=400 400w, ' +\n * //           'https://images.prismic.io/repo/image.png?sat=-100&width=800 800w,' +\n * //           'https://images.prismic.io/repo/image.png?sat=-100&width=1600 1600w'\n * // }\n * ```\n *\n * @param field - Image field (or one of its responsive views) from which to get\n *   an image URL.\n * @param params - An object of Imgix URL API parameters. The `widths` parameter\n *   defines the resulting `srcset` widths.\n *\n * @returns A `srcset` attribute value for the Image field with Imgix URL\n *   parameters (if given). If the Image field is empty, `null` is returned.\n * @see Imgix URL parameters reference: https://docs.imgix.com/apis/rendering\n */\nexport const asImageWidthSrcSet = <\n\tField extends ImageFieldImage | null | undefined,\n>(\n\tfield: Field,\n\tparams: Omit<BuildWidthSrcSetParams, \"widths\"> &\n\t\tPartial<Pick<BuildWidthSrcSetParams, \"widths\">> = {},\n): AsImageWidthSrcSetReturnType<Field> => {\n\tif (field && isImageThumbnailFilled(field)) {\n\t\tconst { widths = [640, 828, 1200, 2048, 3840], ...urlParams } = params;\n\t\tconst {\n\t\t\turl,\n\t\t\tdimensions,\n\t\t\talt: _alt,\n\t\t\tcopyright: _copyright,\n\t\t\t...responsiveViews\n\t\t} = field;\n\n\t\t// The Prismic Rest API will always return thumbnail values if\n\t\t// the base size is filled.\n\t\tconst responsiveViewObjects: ImageFieldImage<\"filled\">[] =\n\t\t\tObject.values(responsiveViews);\n\n\t\treturn {\n\t\t\tsrc: buildURL(url, urlParams),\n\t\t\tsrcset: responsiveViewObjects.length\n\t\t\t\t? [\n\t\t\t\t\t\tbuildWidthSrcSet(url, {\n\t\t\t\t\t\t\t...urlParams,\n\t\t\t\t\t\t\twidths: [dimensions.width],\n\t\t\t\t\t\t}),\n\t\t\t\t\t\t...responsiveViewObjects.map((thumbnail) => {\n\t\t\t\t\t\t\treturn buildWidthSrcSet(thumbnail.url, {\n\t\t\t\t\t\t\t\t...urlParams,\n\t\t\t\t\t\t\t\twidths: [thumbnail.dimensions.width],\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}),\n\t\t\t\t  ].join(\", \")\n\t\t\t\t: buildWidthSrcSet(field.url, {\n\t\t\t\t\t\t...urlParams,\n\t\t\t\t\t\twidths,\n\t\t\t\t  }),\n\t\t} as AsImageWidthSrcSetReturnType<Field>;\n\t} else {\n\t\treturn null as AsImageWidthSrcSetReturnType<Field>;\n\t}\n};\n","import { ImageFieldImage } from \"@prismicio/types\";\nimport {\n\tbuildPixelDensitySrcSet,\n\tBuildPixelDensitySrcSetParams,\n\tbuildURL,\n} from \"imgix-url-builder\";\n\nimport { imageThumbnail as isImageThumbnailFilled } from \"./isFilled\";\n\n/**\n * The return type of `asImagePixelDensitySrcSet()`.\n */\ntype AsImagePixelDensitySrcSetReturnType<\n\tField extends ImageFieldImage | null | undefined,\n> = Field extends ImageFieldImage<\"filled\">\n\t? {\n\t\t\t/**\n\t\t\t * The Image field's image URL with Imgix URL parameters (if given).\n\t\t\t */\n\t\t\tsrc: string;\n\n\t\t\t/**\n\t\t\t * A pixel-densitye-based `srcset` attribute value for the Image field's\n\t\t\t * image with Imgix URL parameters (if given).\n\t\t\t */\n\t\t\tsrcset: string;\n\t  }\n\t: null;\n\n/**\n * Creates a pixel-density-based `srcset` from an Image field with optional\n * image transformations (via Imgix URL parameters).\n *\n * If a `pixelDensities` parameter is not given, the following pixel densities\n * will be used by default: 1, 2, 3.\n *\n * @example\n *\n * ```ts\n * const srcset = asImagePixelDensitySrcSet(document.data.imageField, {\n * \tpixelDensities: [1, 2],\n * \tsat: -100,\n * });\n * // => {\n * //   src:    'https://images.prismic.io/repo/image.png?sat=-100',\n * //   srcset: 'https://images.prismic.io/repo/image.png?sat=-100&dpr=1 1x, ' +\n * //           'https://images.prismic.io/repo/image.png?sat=-100&dpr=2 2x'\n * // }\n * ```\n *\n * @param field - Image field (or one of its responsive views) from which to get\n *   an image URL.\n * @param params - An object of Imgix URL API parameters. The `pixelDensities`\n *   parameter defines the resulting `srcset` widths.\n *\n * @returns A `srcset` attribute value for the Image field with Imgix URL\n *   parameters (if given). If the Image field is empty, `null` is returned.\n * @see Imgix URL parameters reference: https://docs.imgix.com/apis/rendering\n */\nexport const asImagePixelDensitySrcSet = <\n\tField extends ImageFieldImage | null | undefined,\n>(\n\tfield: Field,\n\tparams: Omit<BuildPixelDensitySrcSetParams, \"pixelDensities\"> &\n\t\tPartial<Pick<BuildPixelDensitySrcSetParams, \"pixelDensities\">> = {},\n): AsImagePixelDensitySrcSetReturnType<Field> => {\n\tif (field && isImageThumbnailFilled(field)) {\n\t\tconst { pixelDensities = [1, 2, 3], ...imgixParams } = params;\n\n\t\treturn {\n\t\t\tsrc: buildURL(field.url, imgixParams),\n\t\t\tsrcset: buildPixelDensitySrcSet(field.url, {\n\t\t\t\t...imgixParams,\n\t\t\t\tpixelDensities,\n\t\t\t}),\n\t\t} as AsImagePixelDensitySrcSetReturnType<Field>;\n\t} else {\n\t\treturn null as AsImagePixelDensitySrcSetReturnType<Field>;\n\t}\n};\n","export { asDate } from \"./asDate\";\nexport { asLink } from \"./asLink\";\nexport { asText } from \"./asText\";\nexport { asHTML } from \"./asHTML\";\nexport { asImageSrc } from \"./asImageSrc\";\nexport { asImageWidthSrcSet } from \"./asImageWidthSrcSet\";\nexport { asImagePixelDensitySrcSet } from \"./asImagePixelDensitySrcSet\";\nexport * as isFilled from \"./isFilled\";\n\nexport { documentToLinkField } from \"./documentToLinkField\";\n\nimport { Element } from \"@prismicio/richtext\";\nexport { Element };\n/**\n * @deprecated Renamed to `Element` (without an \"s\").\n */\n// TODO: Remove in v3.\nexport const Elements = Element;\n\nexport type {\n\tLinkResolverFunction,\n\tHTMLFunctionSerializer,\n\tHTMLMapSerializer,\n} from \"./types\";\n"],"names":["baseAsText","isImageThumbnailFilled"],"mappings":"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"}